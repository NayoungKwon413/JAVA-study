
**********FileInputStreamEx1.java**********
package chap15;

import java.io.FileInputStream;
import java.io.IOException;

/*
 * FileInputStream : 파일의 내용을 읽어오기. 바이트형 입력스트림.
 *   int read() : 1byte 단위로 읽어서 리턴.
 *   int read(byte[] buf) : buf의 크기만큼 읽어서 데이터를 buf에 저장함.
 *                          실제로 읽은 바이트수 리턴.
 *   int read(byte[] buf, int start, int len) : 
 *                          buf의 크기에서 len 길이만큼 데이터를 읽어서 데이터를 buf의 start 인덱스부터 저장함.
 *                          실제로 읽은 바이트수 리턴
 */
public class FileInputStreamEx1 {
	public static void main(String[] args) throws IOException {
//      fis : src/chap15/InputStreamEx1.java 참조(읽기위한 준비)
		FileInputStream fis = new FileInputStream("src/chap15/InputStreamEx1.java");
		System.out.println("==== read() 메서드를 이용하여 읽기");
		int data =0;
		while((data=fis.read()) != -1) {
			System.out.print((char)data);
		}
		System.out.println("==== read(byte[] buf) 메서드를 이용하여 읽기");
		fis = new FileInputStream("src/chap15/InputStreamEx1.java");
		//fis.available() : 읽기 가능 바이트 수 = 파일의 크기, 즉 파일의 바이트 수와 같음.
		byte[] buf = new byte[fis.available()];
		while((data=fis.read(buf)) != -1) {  //-1: EOF.파일의 끝. 파일 끝까지 읽어라
			System.out.println(new String(buf,0,data));  //buf = 내용 /data= 실제로 읽은 byte수 => 0부터 실제로 읽은 byte수인 data 만큼 buf를 읽음
		}  //data : 실제 읽은 바이트 수 저장. //buf : 파일의 내용
		System.out.println("==== read(byte[] buf,start,len) 메서드를 이용하여 읽기");
		fis = new FileInputStream("src/chap15/InputStreamEx1.java");
		buf = new byte[fis.available()];
		while((data=fis.read(buf,0,buf.length)) != -1) {  //buf의 크기에서 buf.length까지 데이터를 읽은 후, start 인덱스(0)부터 buf에 그 내용을 저장함
			System.out.println(new String(buf,0,data));  
		}
	}

}

**********InputStreamEx1.java**********
package chap15;

import java.io.IOException;
import java.io.InputStream;

/*
 * IO 스트림 : 데이터의 이동통로, 단방향(입력, 출력), 지연(버퍼가 존재)
 * 
 *      입력
 *          바이트 : InputStream => 1바이트 단위 읽음
 *          문자형 : Reader      => 2바이트 단위 읽음
 *          
 *          바이트 -> 문자형 변경 가능
 *                  InputStreamReader : Reader의 하위 클래스
 *      출력
 *          바이트 : OutputStream => 1바이트 단위 출력
 *          문자형 : Writer       => 2바이트 단위 출력
 *          
 *          바이트 -> 문자형 변경 가능
 *                  OutputStreamWriter : Writer의 하위 클래스
 *                  
 * 자바에서 제공되는 표준 입출력 객체
 *    표준입력 : InputStream System.in => 키보드에서 입력
 *    표준출력 : PrintStream System.out => 콘솔(화면)으로 데이터 출력
 *    표준오류 : PrintStream System.err => 콘솔(화면)으로 오류 출력
 */
public class InputStreamEx1 {

	public static void main(String[] args) throws IOException {
		InputStream in = System.in;
		int data =0;
		while((data=in.read())!= -1) {
			System.out.print((char)data);
		}

	}

}

**********ObjectInputStreamEx1.java**********
package chap15;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;

/*
 * ObjectInputStream 예제
 */
public class ObjectInputStreamEx1 {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("object.ser"));
		Customer c1 = (Customer)ois.readObject(); //object.ser 파일에서 객체 한 개를 읽음. object 파일에는 Customer 객체가 저장되어 있으나 Object 타입으로 읽어옴
		Customer c2 = (Customer)ois.readObject();
		System.out.println("복원된 고객1:"+c1);
		System.out.println("복원된 고객2:"+c2);
	}
}

**********ObjectInputStreamEx2.java**********
package chap15;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;

/*
 * 상속관련 직렬화 예제
 * 파일에서 객체를 읽어 복원하기 
 */
public class ObjectInputStreamEx2 {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("object2.ser"));
		User u1=(User)ois.readObject();
		User u2=(User)ois.readObject();
		System.out.println("복원된 사용자1 :"+u1);
		System.out.println("복원된 사용자2 :"+u2);
	}
}
